import Head from "next/head";
import dynamic from "next/dynamic";
import { useEffect, useState } from "react";
const Header = dynamic(() => import("../components/Header"));
const Result = dynamic(() => import("../components/Result"));
import { useDispatch } from "react-redux";
import { addMovie } from "../features/movieSlice";
import { resetGrid } from "../features/gridSlice";
import Reveal from "react-reveal/Reveal";
import SortingHeader from "../components/SortingHeader";
import { pageCount } from "../utils/helpers";
import PaginationNew from "../components/PaginationNew";
import { show_per_page } from "../config";
import { fetchAllMovies } from "../utils/fetchmovies";

export default function Allmovie({ movie, totalMovieCount, all }) {
  const movies = movie;
  console.log(movies, totalMovieCount);
  const dispatch = useDispatch();
  const [loading, setLoading] = useState(true);
  const [currentpage, setCurrentPage] = useState(1);
  const [postsPerPage] = useState(12);
  const [sortingCriteria, setSortingCriteria] = useState("releasedateDsc");

  const [sortingMovie, setSortingMovie] = useState(
    movies
      .slice()
      .sort(
        (b, a) =>
          new Date(a?.releasedate).getTime() -
          new Date(b?.releasedate).getTime()
      )
  );

  useEffect(() => {
    if (sortingCriteria === "releasedateDsc") {
      let newMovie = movies
        .slice()
        .sort(
          (b, a) =>
            new Date(a?.releasedate).getTime() -
            new Date(b?.releasedate).getTime()
        );
      setSortingMovie(newMovie);
    }
    if (sortingCriteria === "releasedateAsc") {
      let newMovie = movies
        .slice()
        .sort(
          (b, a) =>
            new Date(b?.releasedate).getTime() -
            new Date(a?.releasedate).getTime()
        );
      setSortingMovie(newMovie);
    }
    if (sortingCriteria === "idAsc") {
      let newMovie = movies.slice().sort(function (a, b) {
        return a.id.localeCompare(b.id);
      });
      setSortingMovie(newMovie);
    }
    if (sortingCriteria === "idDsc") {
      let newMovie = movies.slice().sort(function (b, a) {
        return a.id.localeCompare(b.id);
      });
      setSortingMovie(newMovie);
    }
    if (sortingCriteria === "titleAsc") {
      let newMovie = movies.slice().sort(function (a, b) {
        return a.actor.localeCompare(b.actor);
      });
      setSortingMovie(newMovie);
    }
    if (sortingCriteria === "titleDsc") {
      let newMovie = movies.slice().sort(function (b, a) {
        return a.actor.localeCompare(b.actor);
      });
      setSortingMovie(newMovie);
    }
    if (sortingCriteria === "ratingDsc") {
      let newMovie = movies.slice().sort(function (a, b) {
        return Number(b.rating) - Number(a.rating);
      });
      setSortingMovie(newMovie);
    }
    if (sortingCriteria === "ratingAsc") {
      let newMovie = movies.slice().sort(function (a, b) {
        return Number(a.rating) - Number(b.rating);
      });
      setSortingMovie(newMovie);
    }
  }, [movies, sortingCriteria]);

  // const indexOfLastPost = currentpage * postsPerPage;
  // const indexOfFirstPost = indexOfLastPost - postsPerPage;
  // const currentMovie = sortingMovie?.slice(indexOfFirstPost, indexOfLastPost);

  useEffect(() => {
    dispatch(resetGrid());
    dispatch(addMovie(movies));
    setLoading(false);
  }, [movies]);

  const getdata = async () => {
    const movieData = await fetchAllMovies();
    console.log(movieData.movies);
  };

  return (
    <div className="">
      <Head>
        <title>My JavLib</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header collections={movies} />
      <SortingHeader setSortingCriteria={setSortingCriteria} />
      <main className="mx-auto max-w-screen">
        <Reveal effect="fadeInUp">
          {loading ? (
            <p>Loading...</p>
          ) : (
            <Result collections={sortingMovie} allDataisTrue />
          )}
        </Reveal>
        <PaginationNew totalMovieCount={totalMovieCount} />
      </main>
    </div>
  );
}
export async function getServerSideProps({ req, res }) {
  res.setHeader(
    "Cache-Control",
    "public, s-maxage=10, stale-while-revalidate=59"
  );

  const moviesData = await fetchAllMovies();
  const movies = moviesData.movies;

  // count how many pages
  let totalMovieCount = pageCount(movies.length);
  // const sortMovie = movies
  //   .slice()
  //   .sort(
  //     (b, a) =>
  //       new Date(a?.releasedate).getTime() - new Date(b?.releasedate).getTime()
  //   );
  // let totalMovie = sortMovie.slice(0, show_per_page);

  return {
    props: {
      movie: moviesData.movies.movies,
      totalMovieCount: moviesData.totalMovieCount,
    },
  };
}
