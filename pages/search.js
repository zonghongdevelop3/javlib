import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import HeaderItems from "../components/HeaderItems";
import ResultList from "../components/ResultList";
import {
  AdjustmentsIcon,
  FireIcon,
  GlobeAltIcon,
  HomeIcon,
  SearchIcon,
  GiftIcon,
  SparklesIcon,
  HeartIcon,
} from "@heroicons/react/outline";
import Pagination from "../components/Pagination";

function Search({ movies }) {
  const dataList = movies;
  const router = useRouter();
  const [isSearch, setIsSearch] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");
  const [searchResults, setSearchResults] = useState(dataList);
  const [loading, setLoading] = useState(true);
  const excludeColumns = [];
  const [currentpage, setCurrentPage] = useState(1);
  const [postsPerPage] = useState(12);
  // get current poster
  const indexOfLastPost = currentpage * postsPerPage;
  const indexOfFirstPost = indexOfLastPost - postsPerPage;
  const currentMovie = searchResults?.slice(indexOfFirstPost, indexOfLastPost);
  const paginate = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  useEffect(() => {
    if (!isSearch) {
      setSearchResults(movies);
    }
  }, [movies]);

  const navtoHome = () => {
    router.push("/");
  };
  const navtoAll = () => {
    router.push("/allmovies");
  };

  const navtosearch = () => {
    router.push("/search");
  };

  const navtofilter = () => {
    router.push("/filter");
  };

  const navtowebsite = () => {
    router.push("/website");
  };

  const navtoRank = () => {
    router.push("/actress");
  };
  const navtomobileRandom = () => {
    router.push("/mobilerandom");
  };
  const handleChange = (value) => {
    setSearchTerm(value);
    filterData(value);
  };
  const navtoRandom = () => {
    router.push("/random");
  };
  const navtoSearchAll = () => {
    router.push("/searchall");
  };

  const filterData = (value) => {
    setIsSearch(true);
    const Value = value.toLocaleUpperCase().trim();
    if (Value === "") setSearchResults(dataList);
    else {
      const filteredData = dataList?.filter((item) => {
        return Object?.keys(item)?.some((key) =>
          excludeColumns.includes(key)
            ? false
            : item[key]?.toString().toLocaleUpperCase().includes(Value)
        );
      });

      setSearchResults(filteredData);
    }
  };

  return (
    <div>
      <Head>
        <title>My JavLib</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex flex-col items-center sticky top-0 z-50 h-auto m-5">
        <div className="flex items-center space-x-6">
          <div className="flex flex-grow justify-evenly max-w-2xl">
            <HeaderItems title="HOME" Icon={HomeIcon} navtoHome={navtoHome} />
            <HeaderItems title="ALL" Icon={SparklesIcon} navtoHome={navtoAll} />
            <HeaderItems
              title="SEARCH ALL"
              Icon={HeartIcon}
              navtosearch={navtoSearchAll}
            />
            <HeaderItems
              title="FILTER"
              Icon={AdjustmentsIcon}
              navtosearch={navtofilter}
            />
            <HeaderItems
              title="SEARCH"
              Icon={SearchIcon}
              navtosearch={navtosearch}
            />
            <HeaderItems
              title="WEBSITE"
              Icon={GlobeAltIcon}
              navtosearch={navtowebsite}
            />
            <HeaderItems
              title="ACTRESS"
              Icon={FireIcon}
              navtosearch={navtoRank}
            />
            <div className="flex lg:hidden">
              <HeaderItems
                title="Random"
                Icon={GiftIcon}
                navtosearch={navtomobileRandom}
              />
            </div>
            <div className="hidden lg:flex">
              <HeaderItems
                title="Random"
                Icon={GiftIcon}
                navtosearch={navtoRandom}
              />
            </div>
          </div>
        </div>

        <div className="w-full">
          <input
            className={` focus:shadow-2xl focus:shadow-blue-500 font-bold tracking-widest bg-gradient-to-l text-gray-800 from-[#06202A] p-2 px-5 h-full w-full flex-grow rounded flex-shrink rounded-l-md focus:outline-none
           `}
            value={searchTerm}
            onChange={(e) => handleChange(e.target.value)}
            placeholder="Search by Movie"
          />
        </div>
      </div>

      <main className="mx-auto max-w-screen">
        {searchResults.length > 0 && (
          <h1 className=" text-white text-xl lg:text-3xl mt-10 font-light text-center">
            {searchResults.length} movies
          </h1>
        )}

        <div className="px-5 my-10 grid grid-flow-row-dense md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
          {currentMovie?.map((collection) => (
            <ResultList
              key={collection.id}
              id={collection?.id}
              code={collection?.id}
              image={collection?.bigimageurl}
              extraimageurl={collection?.extraimageurl}
              name={collection?.actor}
              title={collection?.title}
              genre={collection?.genre}
              publisher={collection?.studio}
              series={collection?.tag}
              filePath={collection?.filePath}
              sourceurl={collection?.sourceurl}
              studio={collection?.studio}
            />
          ))}
        </div>

        {isSearch && searchResults?.length === 0 && (
          <div className="flex items-center justify-center cursor-pointer">
            <h1 className="text-6xl text-gray-400 text-center font-medium tracking-widest">
              No Movies found
            </h1>
          </div>
        )}
        {isSearch && searchResults?.length > 0 && (
          <Pagination
            postsPerPage={postsPerPage}
            totalPosts={searchResults?.length}
            paginate={paginate}
          />
        )}
      </main>
    </div>
  );
}

export default Search;

export const getServerSideProps = async ({ req, res }) => {
  res.setHeader(
    "Cache-Control",
    "public, s-maxage=10, stale-while-revalidate=59"
  );
  const movieRes = await fetch(
    "https://raw.githubusercontent.com/zonghongdevelop3/javdb.io/main/data/movie.json"
  );
  const data = await movieRes.json();
  const sortMovie = data
    .slice()
    .sort(
      (b, a) =>
        new Date(a?.releasedate).getTime() - new Date(b?.releasedate).getTime()
    );
  return {
    props: {
      movies: sortMovie,
    },
  };
};
