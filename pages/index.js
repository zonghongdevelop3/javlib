import Head from "next/head";
import dynamic from "next/dynamic";
import { useEffect, useState } from "react";
// redux
import { useDispatch } from "react-redux";
import { addMovie } from "../features/movieSlice";
import { resetGrid } from "../features/gridSlice";
import Reveal from "react-reveal/Reveal";
// import movies from "../data/movie.json";
const Header = dynamic(() => import("../components/Header"));
const Result = dynamic(() => import("../components/Result"));
const Pagination = dynamic(() => import("../components/Pagination"));
const SortingHeader = dynamic(() => import("../components/SortingHeader"));
// utils
import { fetchMovies } from "../utils/fetchmovies";

export default function Home({ movies }) {
  const dispatch = useDispatch();
  const [loading, setLoading] = useState(true);
  const [currentpage, setCurrentPage] = useState(1);
  const [postsPerPage] = useState(20);
  const [sortingCriteria, setSortingCriteria] = useState("releasedateDsc");
  const [sortingMovie, setSortingMovie] = useState(
    movies
      .slice()
      .sort(
        (b, a) =>
          new Date(a?.releasedate).getTime() -
          new Date(b?.releasedate).getTime()
      )
  );

  useEffect(() => {
    if (sortingCriteria === "releasedateDsc") {
      let newMovie = movies
        .slice()
        .sort(
          (b, a) =>
            new Date(a?.releasedate).getTime() -
            new Date(b?.releasedate).getTime()
        );
      setSortingMovie(newMovie);
    }
    if (sortingCriteria === "releasedateAsc") {
      let newMovie = movies
        .slice()
        .sort(
          (b, a) =>
            new Date(b?.releasedate).getTime() -
            new Date(a?.releasedate).getTime()
        );
      setSortingMovie(newMovie);
    }
    if (sortingCriteria === "idAsc") {
      let newMovie = movies.slice().sort(function (a, b) {
        return a.id.localeCompare(b.id);
      });
      setSortingMovie(newMovie);
    }
    if (sortingCriteria === "idDsc") {
      let newMovie = movies.slice().sort(function (b, a) {
        return a.id.localeCompare(b.id);
      });
      setSortingMovie(newMovie);
    }
    if (sortingCriteria === "titleAsc") {
      let newMovie = movies.slice().sort(function (a, b) {
        return a.actor.localeCompare(b.actor);
      });
      setSortingMovie(newMovie);
    }
    if (sortingCriteria === "titleDsc") {
      let newMovie = movies.slice().sort(function (b, a) {
        return a.actor.localeCompare(b.actor);
      });
      setSortingMovie(newMovie);
    }
    if (sortingCriteria === "ratingDsc") {
      let newMovie = movies.slice().sort(function (a, b) {
        return Number(b.rating) - Number(a.rating);
      });
      setSortingMovie(newMovie);
    }
    if (sortingCriteria === "ratingAsc") {
      let newMovie = movies.slice().sort(function (a, b) {
        return Number(a.rating) - Number(b.rating);
      });
      setSortingMovie(newMovie);
    }
  }, [movies, sortingCriteria]);

  const indexOfLastPost = currentpage * postsPerPage;
  const indexOfFirstPost = indexOfLastPost - postsPerPage;
  const currentMovie = sortingMovie?.slice(indexOfFirstPost, indexOfLastPost);
  const paginate = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  useEffect(() => {
    dispatch(resetGrid());
    dispatch(addMovie(movies));
    setLoading(false);
  }, [movies]);

  return (
    <div className="">
      <Head>
        <title>My JavLib</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header collections={movies} />
      <SortingHeader setSortingCriteria={setSortingCriteria} />

      <main className="mx-auto max-w-screen">
        <Reveal effect="fadeInUp">
          {loading ? <p>Loading...</p> : <Result collections={currentMovie} />}
        </Reveal>
        <Pagination
          postsPerPage={postsPerPage}
          totalPosts={movies?.length}
          paginate={paginate}
        />
      </main>
    </div>
  );
}
export async function getServerSideProps({ req, res }) {
  res.setHeader(
    "Cache-Control",
    "public, s-maxage=10, stale-while-revalidate=59"
  );

  const data = await fetchMovies();
  const movies = data.movies;

  return {
    props: { movies: movies },
  };
}
