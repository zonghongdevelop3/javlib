import Head from "next/head";
import dynamic from "next/dynamic";
import { useEffect, useState, useRef } from "react";
const Header = dynamic(() => import("../../components/Header"));
const Result = dynamic(() => import("../../components/Result"));
import { useDispatch, useSelector } from "react-redux";
import { addMovie } from "../../features/movieSlice";
import { resetGrid } from "../../features/gridSlice";
import Reveal from "react-reveal/Reveal";
import { show_per_page } from "../../config";

import SortingHeader from "../../components/SortingHeader";
import { pageCount } from "../../utils/helpers";
import PaginationNew from "../../components/PaginationNew";
import {
  fetchAllBaseMovie,
  fetchAllMovies,
  fetchAllMoviesPaginate,
} from "../../utils/fetchmovies";

export default function Home({
  moviesData,
  totalMovieCount,
  currentPostpage,
  totalMovie,
  newsortMovie,
  params,
}) {
  // const movies = JSON.parse(moviesData);
  const movies = moviesData;

  const dispatch = useDispatch();
  const [loading, setLoading] = useState(true);
  const [currentpage, setCurrentPage] = useState(1);
  const [postsPerPage] = useState(40);
  const [sortingCriteria, setSortingCriteria] = useState("releasedateDsc");
  const [sortingMovie, setSortingMovie] = useState(
    movies
      ?.slice()
      .sort(
        (b, a) =>
          new Date(a?.releasedate).getTime() -
          new Date(b?.releasedate).getTime()
      )
  );

  useEffect(() => {
    if (sortingCriteria === "releasedateDsc") {
      let newMovie = movies
        ?.slice()
        .sort(
          (b, a) =>
            new Date(a?.releasedate).getTime() -
            new Date(b?.releasedate).getTime()
        );
      setSortingMovie(newMovie);
    }
    if (sortingCriteria === "releasedateAsc") {
      let newMovie = movies
        ?.slice()
        .sort(
          (b, a) =>
            new Date(b?.releasedate).getTime() -
            new Date(a?.releasedate).getTime()
        );
      setSortingMovie(newMovie);
    }
    if (sortingCriteria === "idAsc") {
      let newMovie = movies?.slice().sort(function (a, b) {
        return a.id.localeCompare(b.id);
      });
      setSortingMovie(newMovie);
    }
    if (sortingCriteria === "idDsc") {
      let newMovie = movies?.slice().sort(function (b, a) {
        return a.id.localeCompare(b.id);
      });
      setSortingMovie(newMovie);
    }
    if (sortingCriteria === "titleAsc") {
      let newMovie = movies?.slice().sort(function (a, b) {
        return a.actor.localeCompare(b.actor);
      });
      setSortingMovie(newMovie);
    }
    if (sortingCriteria === "titleDsc") {
      let newMovie = movies?.slice().sort(function (b, a) {
        return a.actor.localeCompare(b.actor);
      });
      setSortingMovie(newMovie);
    }
    if (sortingCriteria === "ratingDsc") {
      let newMovie = movies?.slice().sort(function (a, b) {
        return Number(b.rating) - Number(a.rating);
      });
      setSortingMovie(newMovie);
    }
    if (sortingCriteria === "ratingAsc") {
      let newMovie = movies?.slice().sort(function (a, b) {
        return Number(a.rating) - Number(b.rating);
      });
      setSortingMovie(newMovie);
    }
  }, [movies, sortingCriteria]);

  const indexOfLastPost = currentpage * postsPerPage;
  const indexOfFirstPost = indexOfLastPost - postsPerPage;
  const currentMovie = sortingMovie?.slice(indexOfFirstPost, indexOfLastPost);

  useEffect(() => {
    dispatch(resetGrid());
    dispatch(addMovie(movies));
    setLoading(false);
  }, [movies]);

  const getpagedata = async () => {
    const data = await fetchAllMoviesPaginate(currentPostpage);
    console.log(data);
  };

  return (
    <div className="">
      <Head>
        <title>My JavLib</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header collections={movies} />
      <SortingHeader setSortingCriteria={setSortingCriteria} />
      <button onClick={getpagedata}>getpagedata</button>

      <main className="mx-auto max-w-screen">
        <Reveal effect="fadeInUp">
          {loading ? (
            <p>Loading...</p>
          ) : (
            <Result collections={currentMovie} allDataisTrue />
          )}
        </Reveal>

        <PaginationNew
          totalMovieCount={totalMovieCount}
          currentPostpage={currentPostpage}
        />
      </main>
    </div>
  );
}
export async function getStaticPaths() {
  const allmovieData = await fetchAllBaseMovie();
  let totalMovieCount = pageCount(allmovieData?.length);

  // totalMovieCount number convert into a array
  let pageIntoArray = Array.from(Array(totalMovieCount).keys());

  let paths = [];

  pageIntoArray.splice(0, 100).map((path) =>
    paths.push({
      params: { page: `${path + 1}` },
    })
  );

  return {
    paths,
    fallback: "blocking",
  };
}

export async function getStaticProps({ params }) {
  const moviesData = await fetchAllMoviesPaginate(params.page);
  const newAllData = moviesData.movies;
  const totalMovieCount = moviesData.totalMovieCount;

  return {
    props: {
      moviesData: newAllData,
      currentPostpage: params.page,
      totalMovieCount,
    },
    revalidate: 60,
  };
}
